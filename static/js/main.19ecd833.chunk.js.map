{"version":3,"sources":["App.styles.ts","data/categories.ts","data/items.ts","helpers/dateFilter.ts","components/TableArea/styles.ts","components/TableItem/styles.ts","components/TableItem/index.tsx","components/TableArea/index.tsx","components/InfoArea/styles.ts","components/ResumeItem/styles.ts","components/ResumeItem/index.tsx","components/InfoArea/index.tsx","components/InputArea/styles.ts","components/InputArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Header","HeaderText","h1","Body","categories","food","title","color","expense","rent","salary","items","date","Date","category","value","formatDate","year","getFullYear","month","getMonth","day","getDate","addZeroToDate","n","formatCurrentMonth","currentMonth","split","parseInt","Table","table","TableHeadColumn","th","props","width","TableLine","tr","TableColumn","td","Category","Value","TableItem","item","TableArea","list","map","index","MonthArea","MonthArrow","MonthTitle","ResumeArea","Title","Info","ResumeItem","InfoArea","onMonthChange","income","onClick","currentDate","setMonth","InputLabel","label","InputTitle","Input","input","Select","select","Button","button","InputArea","onAdd","useState","dateField","setDateField","categoryField","setCategoryField","titleField","setTitleField","valueField","setValueField","categoryKeys","Object","keys","clearFields","type","onChange","e","target","key","parseFloat","errors","isNaN","getTime","push","includes","length","alert","join","App","setList","filteredList","setFilteredList","now","getCurrentMonth","setCurrentMonth","setIncome","setExpense","useEffect","newList","i","filterListByMonth","incomeCount","expenseCount","newMonth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19ecd833.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    background-color: darkblue;\r\n    height: 150px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const HeaderText = styled.h1`\r\n    margin: 0;\r\n    padding: 0;\r\n    color: #fff;\r\n    padding-top: 30px;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    margin: auto;\r\n    max-width: 980px;\r\n    margin-bottom: 50px;\r\n`;","import { Category } from '../types/Category';\r\n\r\nexport const categories: Category = {\r\n    food:{ \r\n        title: 'Alimentação',\r\n        color: 'brown',\r\n        expense: true\r\n    },\r\n    rent:{\r\n        title: 'Aluguel',\r\n        color: 'red',\r\n        expense: true\r\n    },\r\n    salary:{\r\n        title: 'Salário',\r\n        color: 'green',\r\n        expense: false\r\n    }\r\n}","import { Item } from '../types/Item';\r\n\r\nexport const items: Item[] = [\r\n    { \r\n        date: new Date(2021, 8, 10),\r\n        category: 'food',\r\n        title: 'McDonads',\r\n        value: 32.12\r\n    },\r\n    { \r\n        date: new Date(2021, 9, 15),\r\n        category: 'food',\r\n        title: 'Burger King',\r\n        value: 28\r\n    },\r\n    { \r\n        date: new Date(2021, 9, 16),\r\n        category: 'rent',\r\n        title: 'Aluguel',\r\n        value: 845.65\r\n    },\r\n    { \r\n        date: new Date(2021, 10, 15),\r\n        category: 'salary',\r\n        title: 'Salario',\r\n        value: 3500\r\n    }\r\n];","import { Item } from '../types/Item';\r\n\r\nexport const getCurrentMonth = () => {\r\n    let now = new Date();\r\n    return `${now.getFullYear()}-${now.getMonth()+1}`;\r\n}\r\n\r\nexport const filterListByMonth = (list: Item[], date: string): Item[] => {\r\n    let newList: Item[] = [];\r\n    let [year, month] = date.split('-');\r\n\r\n    for(let i in list) {\r\n        if(\r\n            list[i].date.getFullYear() === parseInt(year) &&\r\n            (list[i].date.getMonth() + 1) === parseInt(month)\r\n        ) {\r\n            newList.push(list[i]);\r\n        }\r\n    }\r\n\r\n    return newList;\r\n}\r\n\r\nexport const formatDate = (date: Date): string => {\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate() +1;\r\n\r\n    return `${addZeroToDate(day)}/${addZeroToDate(month)}/${year}`;\r\n}\r\nconst addZeroToDate = (n: number): string => n < 10 ? `0${n}` : `${n}`;\r\n\r\nexport const formatCurrentMonth = (currentMonth: string): string => {\r\n    let [year, month] = currentMonth.split('-');\r\n    let months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\r\n    return `${months[parseInt(month) - 1]} de ${year}`;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Table = styled.table`\r\n    width: 100%;\r\n    background-color: #FFF;\r\n    padding: 20px;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    margin-top: 20px;\r\n`;\r\n\r\nexport const TableHeadColumn = styled.th<{width?: number}>`\r\n    width: ${props => props.width ? `${props.width}px` : 'auto'};\r\n    padding: 10px 0;\r\n    text-align: left;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const TableLine = styled.tr`\r\n\r\n`;\r\n\r\nexport const TableColumn = styled.td`\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const Category = styled.div<{ color: string }>`\r\n    display: inline-block;\r\n    padding: 5px 10px;\r\n    border-radius: 5px;\r\n    color: #FFF;\r\n    background-color: ${props => props.color};\r\n`;\r\n\r\nexport const Value = styled.div<{ color: string }>`\r\n    color: ${props => props.color}\r\n`;","import { categories } from '../../data/categories';\r\nimport { formatDate } from '../../helpers/dateFilter';\r\nimport { Item } from '../../types/Item';\r\nimport * as C from './styles';\r\n\r\ntype Props ={\r\n    item: Item\r\n}\r\n\r\nexport const TableItem = ({ item }: Props) => {\r\n    return(\r\n        <C.TableLine>\r\n            <C.TableColumn>{formatDate(item.date)}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Category color={categories[item.category].color}>\r\n                    {categories[item.category].title}\r\n                </C.Category>\r\n            </C.TableColumn>\r\n            <C.TableColumn>{item.title}</C.TableColumn>\r\n            <C.TableColumn>\r\n                <C.Value color={categories[item.category].expense ? 'red' : 'green'}>\r\n                    R$ {item.value}\r\n                </C.Value>\r\n            </C.TableColumn>\r\n        </C.TableLine>\r\n    );\r\n}","import { Item } from '../../types/Item';\r\nimport * as C from './styles';\r\nimport { TableItem } from '../TableItem';\r\n\r\ntype Props ={\r\n    list: Item[]\r\n}\r\n\r\nexport const TableArea = ({ list }: Props) =>{\r\n    return(\r\n        <C.Table>\r\n            <thead>\r\n                <tr>\r\n                    <C.TableHeadColumn width={100}>Data</C.TableHeadColumn>\r\n                    <C.TableHeadColumn width={130}>Categoria</C.TableHeadColumn>\r\n                    <C.TableHeadColumn>Título</C.TableHeadColumn>\r\n                    <C.TableHeadColumn width={150}>Valor</C.TableHeadColumn>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n              {list.map((item, index) => (\r\n                  <TableItem key={index} item={item} />\r\n              ))}\r\n            </tbody>\r\n        </C.Table>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    background-color: #FFF;\r\n    box-shadow: 0px 0px 5px #CCC;\r\n    border-radius: 10px;\r\n    padding: 20px;\r\n    margin-top: -40px;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArea = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n`;\r\n\r\nexport const MonthArrow = styled.div`\r\n    width: 40px;\r\n    text-align: center;\r\n    font-size: 25px;\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const MonthTitle = styled.div`\r\n    flex: 1;\r\n    text-align: center;\r\n`;\r\n\r\nexport const ResumeArea = styled.div`\r\n    flex: 2;\r\n    display: flex;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n    flex: 1;\r\n`;\r\n\r\nexport const Title = styled.div`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: #888;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Info = styled.div<{ color?: string }>`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    color: ${props => props.color ?? '#000'};\r\n`;","import * as C from './styles';\r\n\r\ntype Props ={\r\n    title: string;\r\n    value: number;\r\n    color?: string;\r\n}\r\n\r\nexport const ResumeItem = ({ title, value, color}: Props) =>{\r\n    return(\r\n        <C.Container>\r\n            <C.Title>{title}</C.Title>\r\n            <C.Info color={color}>R$ {value}</C.Info>\r\n        </C.Container>\r\n    );\r\n}","import { formatCurrentMonth } from '../../helpers/dateFilter';\r\nimport * as C from './styles';\r\nimport { ResumeItem } from '../ResumeItem';\r\n\r\ntype Props = {\r\n    currentMonth: string;\r\n    onMonthChange: (newMonth: string) => void;\r\n    income: number;\r\n    expense: number;\r\n}\r\n\r\nexport const InfoArea = ({ currentMonth, onMonthChange, income, expense}: Props) => {\r\n\r\n    const handlePrevMonth = () =>{\r\n        let [year, month] = currentMonth.split('-');\r\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\r\n        currentDate.setMonth(currentDate.getMonth() - 1);\r\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\r\n    }\r\n\r\n    const handleNextMonth = () =>{\r\n        let [year, month] = currentMonth.split('-');\r\n        let currentDate = new Date(parseInt(year), parseInt(month) - 1, 1);\r\n        currentDate.setMonth(currentDate.getMonth() + 1);\r\n        onMonthChange(`${currentDate.getFullYear()}-${currentDate.getMonth() + 1}`);\r\n    }\r\n\r\n    return(\r\n        <C.Container>\r\n            <C.MonthArea>\r\n                <C.MonthArrow onClick={handlePrevMonth}>◀</C.MonthArrow>\r\n                <C.MonthTitle>{formatCurrentMonth(currentMonth)}</C.MonthTitle>\r\n                <C.MonthArrow onClick={handleNextMonth}>▶</C.MonthArrow>\r\n            </C.MonthArea>\r\n            <C.ResumeArea>\r\n                <ResumeItem title=\"Receitas\" value={income} />\r\n                <ResumeItem title=\"Despesas\" value={expense} />\r\n                <ResumeItem \r\n                    title=\"Balanço\" \r\n                    value={income - expense}\r\n                    color={(income-expense) < 0 ? \"red\" : \"green\"} \r\n                    />\r\n            </C.ResumeArea>\r\n        </C.Container>\r\n    );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\nbackground-color: #FFF;\r\nbox-shadow: 0px 0px 5px #CCC;\r\nborder-radius: 10px;\r\npadding: 20px;\r\nmargin-top: 20px;\r\ndisplay: flex;\r\nalign-items: center;\r\n`;\r\n\r\nexport const InputLabel = styled.label`\r\n    flex: 1;\r\n    margin: 10px;\r\n`;\r\nexport const InputTitle = styled.div`\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n`;\r\nexport const Input = styled.input`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n    font-size: 16px;\r\n`;\r\nexport const Select = styled.select`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n`;\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 0 5px;\r\n    border: 1px solid lightblue;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    color: black;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: blue;\r\n        color: white;\r\n    }\r\n`;","import { useState } from 'react';\r\nimport * as C from './styles';\r\nimport { Item } from '../../types/Item';\r\n\r\nimport { categories } from '../../data/categories';\r\n\r\ntype Props = {\r\n  onAdd: (item: Item) => void;\r\n};\r\n\r\nexport const InputArea = ({ onAdd }: Props) => {\r\n  const [dateField, setDateField] = useState('');\r\n  const [categoryField, setCategoryField] = useState('');\r\n  const [titleField, setTitleField] = useState('');\r\n  const [valueField, setValueField] = useState(0);\r\n\r\n  let categoryKeys: string[] = Object.keys(categories);\r\n\r\n  const handleAddEvent = () => {\r\n    let errors: string[] = [];\r\n\r\n    if(isNaN(new Date(dateField).getTime())) {\r\n      errors.push('Data inválida!');\r\n    }\r\n    if(!categoryKeys.includes(categoryField)) {\r\n      errors.push('Categoria inválida!');\r\n    }\r\n    if(titleField === '') {\r\n      errors.push('Título vazio!');\r\n    }\r\n    if(valueField <= 0) {\r\n      errors.push('Valor inválido!');\r\n    }\r\n\r\n    if(errors.length > 0) {\r\n      alert(errors.join(\"\\n\"));\r\n    } else {\r\n      onAdd({\r\n        date: new Date(dateField),\r\n        category: categoryField,\r\n        title: titleField,\r\n        value: valueField\r\n      });\r\n      clearFields();\r\n    }\r\n  }\r\n\r\n  const clearFields = () => {\r\n    setDateField('');\r\n    setCategoryField('');\r\n    setTitleField('');\r\n    setValueField(0);\r\n  }\r\n\r\n  return (\r\n      <C.Container>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Data</C.InputTitle>\r\n          <C.Input type=\"date\" value={dateField} onChange={e => setDateField(e.target.value)} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Categoria</C.InputTitle>\r\n          <C.Select value={categoryField} onChange={e => setCategoryField(e.target.value)}>\r\n            <>\r\n              <option></option>\r\n              {categoryKeys.map((key, index) => (\r\n                <option key={index} value={key}>{categories[key].title}</option>\r\n              ))}\r\n            </>\r\n          </C.Select>\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Título</C.InputTitle>\r\n          <C.Input type=\"text\" value={titleField} onChange={e => setTitleField(e.target.value)} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>Valor</C.InputTitle>\r\n          <C.Input type=\"number\" value={valueField} onChange={e => setValueField(parseFloat(e.target.value))} />\r\n        </C.InputLabel>\r\n        <C.InputLabel>\r\n          <C.InputTitle>&nbsp;</C.InputTitle>\r\n          <C.Button onClick={handleAddEvent}>Adicionar</C.Button>\r\n        </C.InputLabel>\r\n      </C.Container>\r\n  );\r\n}","import { useState, useEffect } from 'react';\nimport * as C from './App.styles';\nimport { Item } from './types/Item';\nimport { Category } from './types/Category';\nimport { categories } from './data/categories';\nimport { items } from './data/items';\nimport { getCurrentMonth, filterListByMonth } from './helpers/dateFilter';\nimport { TableArea } from './components/TableArea';\nimport { InfoArea } from './components/InfoArea';\nimport { InputArea } from './components/InputArea';\n\nconst App = () => {\n  const [list, setList] = useState(items);\n  const [filteredList, setFilteredList] = useState<Item[]>([]);\n  const [currentMonth, setCurrentMonth] = useState(getCurrentMonth());\n  const [income, setIncome] = useState(0);\n  const [expense, setExpense] = useState(0);\n\n  useEffect(()=>{\n    setFilteredList( filterListByMonth(list, currentMonth) );\n  }, [list, currentMonth]);\n\n  useEffect(()=>{\n    let incomeCount = 0;\n    let expenseCount = 0;\n\n    for(let i in filteredList) {\n      if(categories[filteredList[i].category].expense) {\n        expenseCount += filteredList[i].value;\n      } else {\n        incomeCount += filteredList[i].value;\n      }\n    }\n\n    setIncome(incomeCount);\n    setExpense(expenseCount);\n  }, [filteredList]);\n\n  const handleMonthChange = (newMonth: string) => {\n    setCurrentMonth(newMonth);\n  }\n\n  const handleAddItem = (item: Item) => {\n    let newList = [...list];\n    newList.push(item);\n    setList(newList);\n  }\n\n  return (\n    <C.Container>\n      <C.Header>\n        <C.HeaderText>Sistema Financeiro</C.HeaderText>\n      </C.Header>\n      <C.Body>\n        \n        <InfoArea\n          currentMonth={currentMonth}\n          onMonthChange={handleMonthChange}\n          income={income}\n          expense={expense}\n        />\n\n        <InputArea onAdd={handleAddItem} />\n\n        <TableArea list={filteredList} />\n\n      </C.Body>\n    </C.Container>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}